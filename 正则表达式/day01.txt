1、普通字母

2、元字符
    |  或 两边的正则表达式都进行匹配
    .  单个字符，匹配任意一个字符，但是不能匹配\n换行符
    []  字符集匹配， 匹配括号中的任意一个字符
        [abc]  匹配'abcdef'， 匹配结果是 a, b, c
        [0-9]  表示匹配 0到9之间的任意一个字符
        [a-z] [A-Z]  标示匹配 a到z，  A到Z之间的任意字符
    [^...] 字符集取反，反向匹配，匹配字符范围之外的其他字符。
        [^0-9] 匹配0到9之外的其他任意字符
        [^a-z]  匹配 a到z之外的其他任意字符
    ^ 匹配字符串的开头位置
        ^hello  标示匹配以hello开头的字符串
    $ 匹配以指定的字符串结尾的字符串
        $world

        说明 ^James$ 同时出现则匹配出整个字符串，称为完全匹配或者绝对匹配,严格匹配 "James"这个字符串

    * 匹配前一个字符0次或多次，仅仅作用于*前面的一个字符
        wo*  "wooooo~~~w!"， 匹配结果是  wooooo, w

    + 匹配前一个字符1次或多次,仅仅作用于 + 前面的一个字符

    ? 匹配前一个字符出现0次或1次

    {n} 匹配前一个字符出现n次

    {m,n} 匹配前一个字符出现 m次到n次

    \d \D   \d匹配数字[0-9],  -D匹配非数字[^0-9]

    \w \W   \w匹配普通字符， \W匹配非普通字符
             说明普通字符：数字，字母，下划线，汉字

    \s \S   \s匹配空字符， \S匹配非空字符
            说明 空字符指 \r\n\t\v\f

    \A  \Z  \A标示开头位置，类似^
            \Z标示结束位置， 类似$


    \b  \B  \b标示单词边界， \B标示非单词边界
            "is", "this is a test",   匹配到两个is
            r"\bis\b", "this is a test",   匹配到 第二个is
            r"\Bis\B", "this is a test", 匹配到第一个is


    r"\$\d+" 原样输出原始字符串 '\$\d+'


3、贪婪模式，?非贪婪了模式
    r'ab+', "abbbbb",   贪婪模式匹配到 abbbbb, 尽量多的匹配到字符串
    r'ab+?', "abbbbb"   非贪婪模式匹配到 ab, 只要符合要求，尽量少的获取字符串

4、()分组
    search(r"(王|李\w{1,3})", "王者荣耀").group()

5、捕获组
    给正则表达式的子组起一个名字，表达该子组的意义，这种有名称的子组即为捕获组
    格式(?P<name>pattern)
    re.search(r"(?P<name>ab)+", "ababababab").group(pig)

6、#切割字符串
    s = "hello world how are you L-body"
    l = re.split(r"\W+", s)
    print(l)


7、#替换字符串
    s = "时间 1942:02:03"
    l = re.sub(r"\d+", "00", s, 2 )
    print(l)


8、#返回包含匹配结果的迭代器
    s = "2019年，见过70周年"
    it = re.finditer(r"\d+", s)
    for i in it:
        print(i.group())

9、re.fullmatch()
    匹配目标字符串中所有命中的子字符串

10、re.match()
    匹配开始位置

11、re.search()
    匹配第一处

12、




