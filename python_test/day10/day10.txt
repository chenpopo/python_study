day09回顾
	函数
		作用：用来封装语句块
		def 函数名(函数的参数):
			pass
	
	函数调用
		函数名(函数的实参)

	函数的参数传递(把数据给函数)
		位置传参
			序列传参(*序列)
		关键字传参
			字典关键字传参(**字典)
	函数的形参
		缺省参数
			def fx(a, b=0, c=100):
				pass

		函数形参的定义方式：
			位置形参
			星号元组形参
			命名关键字形参
			双星号字典形参
			
			def fx(a, b, *args, c, d, **kwargs):
				pass
			
			fx(1,2,3,4,c=5, d=6, e=7, f=8)
				1赋值给 a
				2赋值给 b
				3,4作为列表，赋值给 args
				5 赋值给 c
				6赋值给 d
				e=7, f=8 作为字典传递给kwargs
	
	全局变量 和局部变量
	全局变量
		a= 100
		del a
	局部变量
		def fx(a):
			b = 200
		
		fx(100)
		
	作用域
		LEGB
	
		def fx(a):
			b = 100
			def fc(d):
				pass
		
		b 对应fx是局部变量， 对于 fc来说是外部变量， 整体来说是 外嵌函数
		

day10
	
nonlocal 语句
	作用：
		告诉解释器， nonlocal声明的变量不是局部变量，也不是全局变量，而是外部嵌套函数内的变量
	语法：
		nonlocal 变量名1， 变量名2 ... ...
	示例：
		nonlocal.py
	说明：
		1、nonlocal 语句只能在被嵌套函数内部进行使用
		2、对nonlocal变量进行赋值将对外部嵌套函数作用域内的变量进行操作
		3、当有两层或两层以上函数嵌套时，访问nonlocal变量只对最近一层变量进行操作
		4、nonlocal语句的变量列表里的变量名，不能出现在此函数的形参列表中

lambda 表达式表达式
	作用：
		创建一个匿名函数对象
		同def 类似，但不提供函数名
	语法格式：
		labbda [函数形参列表]: 表达式
	说明：
		lambda 表达式创建的函数只能包含一条表达式
		lambda 此函数简单而且可以随时创建和销毁，有利于减少程序的耦合度
	
	练习：
		1、写一个lambda表达式
			fx = lambda n: ... #...代表要自己实现的功能
			此表达式创建的函数判断n这个数的2次方+1 能否被5整除，如果能整除返True， 否则返回False
			如：
				print(fx(3))  #True
				print(fx(4)	  #False
				
			fx = lambda n: (n**2+1)%5==0
			print(fx(4))
				
		2、写一个lambda 表达式来创建函数，此函数返回两个形参变量的最大值
			def myma(x, y)
				pass
			mymax = lambda ... # ...此函数与上面函数功能相同
			print(mymax(100, 200))	

			mymax = lambda x, y: x if x>y else y
			print(mymax(32,4))
			
		3、看懂西面的程序在做什么，结果是什么，为什么
			def fx(f,x,y):
				print(f(x, y))

			fx((lambda a,b:a+b), 100, 200)
			fx((lambda a,b:a**b), 3,4)


eval() 和exec()函数
	eval(source, globals = None, locals = None) 
		把一个字符串 source 当成一个表达式来执行，发挥表达式执行后的结果。
		一行语句
		如果想source的执行过程中把某个参数的值修改了，并传递出来，可以使用global或local先定义此参数
		
		
	exec(source, globals = None, locals = None)
		把一个字符串 source 当成程序来执行，通常用于不同程序之间的通讯使用，第一个服务把一段程序转成字符串，发送给第二个服务把接收到的字符串转换成可执行程序运行
		多行语句
		

函数式编程：
	函数式编程是指一系列函数解决问题
	说明：
		用每一个函数完成细小功能，有一系列函数的有机组合可以解决大问题
		函数仅接收并产生输出，不包含任何能影响输出的内部状态
	示例：
		mysum.py
		

函数的可重入性：
	当一个函数没有使用除局部变量以外的变量，则此函数为可重入函数
	
	说明：
		可重入函数，输入一定，结果必须一定
	
	示例：
		#可重入函数：
		def myadd(x, y):
			return x + y
		
		print(myadd(100,200))   # 300
		print(myadd(100, 200))   #300
		
		不可重入函数：
		s = 0
		def myadd(x, y):
			global s
			s += x+y
			
		print(myadd(100,200)) # 300
		print(myadd(100, 200)) # 600
		
		
高阶函数 High Order Function
	什么是高阶函数
		满足下列条件之一的函数就是高阶函数
			1、函数接受一个或多个函数作为参数传入
			2、函数返回一个函数
			def fy():
			    def fx():
			        print("Hello")
			    return fx            -----> 加上(), 才是执行函数，不加()是引用函数
			
			f = fy()  # fy函数内部返回的是内部函数fx
			print(f)  # 打印内部函数fx的引用，这样能起到的作用是，定义的fx这个内部函数可以在外部使用
			
	

map函数
	map(func, iter1, iter2, ...)
		#返回一个可迭代对象
		此可迭代对象对iter1, iter2中的每一个元素计算得到结果并返回， 当最短的一个函数结束时生成结束
	参数说明：
		func 对可迭代对象处理的函数，函数的参数个数必须与可迭代对象的个数相同
		iter1, iter2 为func提供数据， iter1, iter2 可以有一个或多个，但至少要有一个
		
	示例：见mymap.py
		map(pow, [1,2,3,4,], [4,3,2,1])
		
filter 函数
	格式：
		filter(func, iterable)
	作用：
		筛选可迭代对象itefable中的数据， 返回一个可迭代对象，此可迭代对象值返回iterable提供的数据中满足条件的数据
	说明：
		func含有一个形参的数据处理函数，此函数传入值为iterable中提供的数据，此函数func将对iterable中的每个元素进行求布尔值，返回True则保留此数据，返回False则将此数据丢弃
		iterable为可迭代对象，此可迭代对象听的数据讲传入到func进行判断后将定能否提供给调用者
	示例见：
		filter.py

sorted 函数
	作用：
		将原可迭代对象的数据进行排序，生成排序后的列表
	格式：
		sorted(iterable, key = None, reverse=False)
	说明：
		iterable 可迭代对象
		key 函数是用来监听一个参数，将参数的计算结果作为排序的依据
		reverse 标志用来设置是否降序排序
	示例：
		L=[5,-2,6,-23,26,16]
		L2 = sorted(L)   -> [-23,-2,5,6,16,26]
		L3= sorted(L, reverse = True)  -》[26,16,6,5,-2,-23]
		L4 = sorted(L, key=abs)  -> [-2,5,6,16,-23,26]
		
	注意：
		key绑定的桉树的语法规则：
			def getvalue(x):
				return 依据
	
递归函数 recursion
	函数直接或间接调用自身
	示意：
		直接调用自身：
			def f():
				f()
			
			f()
		间接调用自身：
			def fa():
				fb()
			
			def fb():
				fa()
				
			fa()
			
	递归说明：
		递归一定要控制递归的层数，当符合某一条件的时候要终止递归调用，机会所有的递归都能用while循环来代替
		实现方法：
			先假设此函数已经实现
		递归的优缺点：
			优点：
				递归可以把问题简单化，让思路变的清晰，代码更加简洁
			缺点：
				递归因系统环境影响大，当递归深度太大时， 可能会得到不可预知的结果， 默认系统最多递归深度位1000，当达到1000层时会报错
			
		示例：
			recursion_factorial.py
			
			#阶乘
			def jiecheng(x):
			    if(x<=0):
			        return 1
			    return x*(jiecheng(x-1))
			
			print(jiecheng(4))
		
			递归求和
				def mysum(n):
					if n==0:
					 return 0
					return n + mysum(n-1)

		练习：
			1、已知有五位朋友在一起，
			第五位朋友比第四位朋友大2岁
			第四位朋友比第三位朋友大2岁
			第三位朋友比第二位朋友大2岁
			第二位朋友比第一位朋友大2岁
			第一位朋友说他10岁
			
			写递归函数 get_age(n), 求出第五位朋友和第三位朋友年龄
			如：
				def get_age(n):
					...
				print(get_age(5))
				print(get_age(3))
			
				结果：
					def get_age(n):
					    if n == 1:
					        return 10
					    return get_age(n-1) + 2
				
			2、已知有列表：
				L = [[3,5,8], 10, [[13,14], 15, 18], 20]
				1) 写一个函数 print_list(lst)打印处所有的数字
					print_list(L) 打印 3,5,8,10,13,14
					
					def print_list(lst):
				    for x in lst:
				        if type(x) is list:
				            print_list(x)
				        else:
				            print(x)
					
				2）写一个函数sum_list(lst)， 返回这个列表的所有数字的和
					print(sum_list(L))   #106
					
				注：
					type(x)  可以返回一个变量的类型
					如：
						 type(20)  is int  # True
						 type([1,2,3]) is list # True
