day12回顾
	模块和包
		自定义模块：
			全局变量　》　模块的属性
				import mymod
				mymod.func(5)
			自定义模块的文件名
			
	
	__doc__属性
		绑定文档字符串
	__name__属性
		绑定模块的名字
			被导入模块名字为：　'mymod'
			主模块名字为：‘__main__’
	__file__属性，，绑定当前的文件路径名
	__all__列表：
		限制from import *　语句只导入__all__列表中的属性
	隐藏属性
		以_开头的属性
			#file: mymod.py
			__name = 'abc' #此属性不会被from mymod import * 导入
	随机模块random 生成随机数
	
	
	包　package
	包-
		+-模块
			+-函数
			+-数据
			+-类
	三种导入包的语法：
		import　包名
		import 包名.模块
		import　包名.子包名.模块名
	
		from 包名 import 模块名
		from 包名.模块名　import 属性名
		
		from 包名 import *
		from 包名.模块名 import *
		
	相对导入：
		（仅限在保内模块导入保内模块）
		from .子包名 import　模块
		from ..模块名 import 属性
	
	__init__.py　文件
		１、可以写文档字符串
		２、保内的内容 (函数，数据，类)
	
	__init__.py内的 __all__列表
		会影响 from 包名.???　import *



day13笔记：
异常（基础）Exception
	什么是错误：
		错误是指由于逻辑或语法等导致一个程序无法正常执行的问题
	什么是异常
		异常是程序出错时标识的一种状态
	作用：
		用于信号，通知上层调用者有错误产生，需要处理

try 语句的两种语法：
	try - except 语句
	try - finally 语句
	
try - except 语句
	语法：
		try:
			可能触发异常的语句
		except　错误类型１ [as 变量1]:
			异常处理语句１
		except 错误类型２ [as 变量２]:
			异常处理语句２
		except 错误类型３ [as 变量３]：
			异常处理语句３
		...
		except:
			其他异常处理语句
		else:
			未发生异常语句
		finally:
			最终语句
		注： []　代表其中的内容可以省略

作用：
	尝试捕获异常，得到异常通知，将程序由异常流程转为正常流程并继续执行
示例：
	try_except.py




try-finally 语句
	语法：
		try:
			可能触发异常的语句
		finally:
			最终语句

	说明：
		finally子句可以省略
		一定不存在　except 子句
	作用：
		通常用 try-finally 语句来做触发异常时必须要处理的事情，无论异常是否发生，finally　子句都会被执行
		try-finally 语句不会改变程序的 (正常/异常) 状态
	示例：
		try-finally.py


Raise 语句：
	语法：
		raise error
	说明：


assert 语句（断言语句）
	语法：
		assert 真值表达式，错误数据(通常是字符串)
	作用：
		当真值表达式为False时，用错误数据创建一个AssertionError类型的错误就，并进入异常状态
	等同于：
		if bool(真值表达式) == False:
			raise AssertionError（错误数据）
	示例：
		assert.py


总结：
异常相关的语句：
try-exception 语句
	接收错误通知
try - finally　语句
	无论是否正常，都必须要处理执行的语句
railse　语句
	触发错误通知，让程序进行异常流程
assert 语句
	根据条件触发AssertionError 类型的异常通知，让程序进入异常流程



迭代器　iterator
	什么是迭代器
		迭代器是访问可迭代对象的工具
		迭代器是指iter(obj)　函数返回的对象(实例)
		迭代器可以使用next(obj)　函数获取可迭代对象的数据
	迭代器函数
		iter(iterable)　从可迭代对象中返回一个迭代器，iterable必须是一个能够提供迭代器的对象
		next(iterable)　从迭代器titerable中获取下一个记录，如果无法获取下一条记录，则触发StopIteration异常
		
	说明：
		迭代器只能往前取值，不会后退
		用iter函数可以返回一个可迭代对象的迭代器
	示例键：
		myiter1.py
		
	练习：
		有一个集合
			s = {"唐僧","悟空", "八戒","沙僧"}
		用for语句来便利所有元素如下：
			for x in s
				print(x)
			else
				print("遍历结束")
		请将上面的 for　语句改写为 while　语句和迭代器实现
		答案：myiter3_lianxi.py





《学生信息管理项目》
