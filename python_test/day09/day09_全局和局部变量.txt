1、全局和局部变量
	1、局部变量 - local variable
		1、定义在函数内部的变量就是局部变量
		2、函数的形参也是局部变量
		3、局部变量只能在函数内部使用
		4、局部变量在函数调用时才会被创建，调用之后会自动销毁
		
	2、全局变量 - global variable
		1、定义在函数外部，模块（xx.py）内部的变量就是全局变量
		2、所有的函数都可以访问全局变量，但函数内不能直接赋值
	练习：
		1、创建一个全部列表 L
		2、编写一个函数 input_number()，调用函数时，可以输入一些数字，追加到列表中
		3、在函数外尝试打印输出 L 中的数据并查看效果
		
	3、gloabls()/locals()函数
		gloabls() 返回当前全局变量所组成的字典
		locals()  返回当前局部变量所组成的字典
		
函数变量
	1、函数名是变量，它在def语句创建函数时绑定一个函数
		def func():
			pass
			
		f1 = func  此法将func的功能赋值给变量f1，f1变量绑定的就是一个函数，f1允许当做函数去使用
		f1（）  ->  func()
	2、一个函数可以作为另一个函数的实参进行传递
		
函数的嵌套定义
	1、函数的嵌套定义是指一个函数里面用def语句来创建其他的函数的情况
	
	练习：
		编写一个计算公式的解释执行器
			已知有如下一些函数：
				def myadd(x, y):
					return x+y
				def mysub(x, y):
					return x-y
				def mymul*x, y):
					return x*y
			编写一个函数，传入字符串，返回对应的函数
				def get_op(x):
					#此函数会根据字符串s返回对应的函数
					#如果传入的参数s是“加”或"+"，则返回myadd函数
					#如果传入的参数s是"减"或“-”，则返回mysub函数
			主程序：
				s = input("请输  入计算：") 10 + 20
				fn = get_op("+")
				fn(10, 20)
				
作用域
	1、什么是作用域
		作用域也叫名字空间 - namespace, 是访问变量时查找变量名的访问空间
	2、Python四个作用域
		作用域                 		英文解释                      英文
		1、局部作用域（函数内）			Local(function)                L
		2、外嵌套函数作用域		  	 Enclosing function locals      E
		3、函数定义所在模块作用域		 Global(module)									G
		4、python內建函数作用域			Builting(Python)		    			 B
		
		变量的查找规则：
			访问变量时：
				首先去局部作用域中查找（先搜索本地变量）
				其次在外部嵌套函数作用域内查找（包裹此函数的外部函数内）
				函数定义的所在模块作用域内查找(全局变量)
				python內建模块作用域内查找（內建函数）
				
				变量查找优先级： L --> E --> G --> B
				默认情况下，被使用的变量从当前被使用的所在域中开始查找
				
	3、global语句
		作用：
			1、告诉解释器global语句声明的一个或多个变量的作用域为模块级作用域，也就是全局变量
			
			
			g = 100 #创建全局变量
			def fn():
			    global g #声明g 是全局变量， 即此时在fn()的作用域内不允许存在变量g
			             #如果没有global这句，则下面的g是方法内的局部变量，不是外部的g
			    g = 200  #创建局部变量
			    print("fn.g = ", g)
			fn()
			print("global.v = ", g)
			
			
			
			g = 100
			def fn():
			    g = 50
			    global g #至少报出警告，不要这样写
			    g = 200
			    print("fn.g = ", g)
			fn()
			print("global.v = ", g)
			
			
			g = 100
			def fn(g):
			    global g              #会报错，g已经无法被识别是参数还是全局变量
			    print("fn.g = ", g)
			fn(200)
			print("global.v = ", g)