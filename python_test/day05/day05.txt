1、for循环
	1、作用
		
		
		----------
		列表 - list
		元组 - tuple
		字典 - dict
		... ...
	2、语法
		for 变量列表 in 可迭代对象:
			语句块1
		else:
			语句块2
		
		说明：
			当循环内部使用break语句终止时，那么else的字句部分就不会被执行了；
			当整个循环被执行完后，else才会被执行
	3、range()函数
		1、作用
			用来创建一个生成一系列整数的可迭代对象(整数序列生成器)
		2、语法
			1、range(stop)
				生成 0 - stop之间的数字组成的整数序列，序列不包含stop的值
			2、range(start, stop[, step])
				生成由 start - stop 之间数字组成的整数序列，序列中不包含stop的值
				step： 步长，每次生成完数字厚度额下一个数字的增长量是多少，不成可以省略，默认为1
				示例：
					1、range(4) # 生成0,1,2,3
					2、range(3,6) # 生成3,4,5
					3、range(1,10,2) # 1,3,5,7,9
					4、range(5,0,-2) # 5,3,1
					5、range(5,0) # 生成空
	4、for循环嵌套
		示例1：
			for x in "abc":
				for y in "123":
					print(x + y)
		示例2：
			for x in range(5):
				for y in range(10):
					print(x, y) # 该语句共执行多少次	
			

2、列表 - list
	1、什么是列表
		1、列表是一种容器（用来存储数据对象）
		2、列表可以存储多个数据对象
		3、列表是一个可变序列
		4、列表中的数据元素有先后顺序
	2、创建列表的方式
		1、使用字面值的方式创建列表
			1、创建空列表
				L = []
			2、创建非空列表
				L = [1, 2, 3, 4, 5]
				L = ["北京", "上海", "天津", "重庆"]
				L = [1, 2, 3, "北京", "天津"]
				L = [1, 2, [1, 2, 3], 4]
				L = [[1,2,3,4], [2,3,4,5], [5,6,7,8]]
		2、使用列表的构造函数创建列表
			1、生成空列表
				L = list() # list() 是列表的构造函数，效果等同于 []
			2、使用可迭代对象创建列表
				L = list("hello") -> ["h","e","l","l","o"]
				L = list(range(5,10,2)) -> [5,7,9]
	3、列表运算
		1、算数运算
			+, +=, *, *=
			1、+
				作用：拼接列表
				示例：
					x = [1,2,3]
					y = [4,5,6]
					z = x + y  -> [1,2,3,4,5,6]
			2、+=
				作用：用于将右侧的可迭代对象的数据追加到原列表中
				示例：
					1、x = [1,2,3]
						x +=[4,5,6] -> [1,2,3,4,5,6]
					2、x = [1,2]
						x += "ab" -> [1,2,"a","b"]
			3、*
				1、
				2、x = ["a","b"]
				x * 2 -> ["a","b","a","b"]
			
			
			
		2、逻辑运算
			<  <=  >  >=  == !=
			比较规则： 与字符串的比较规则完全相同
			1、 [1,2,3] < [1,3,2]	结果 True
			2、[1,2,3] != [1,3,2]   结果 True
			3、[1, "two"] > ["two", 1]  结果 TypeError，对应位置的元素数据类型不一致
			
		3、成员运算
			1、in
				判断一个元素是否存在于列表中，存在返回 True，否则返回False
			2、not in  取值与 in 相反
			
			示例：
				x = [1, "two", 3, "四"]
				3 in x -> True
				4 in x -> False

	4、索引操作
		1、索引
			列表[整数]
			说明：当索引值位正整数时，从左到右是；如果是负数，则从右到左，最后一个用 -1 表示
	5、列表的切片 slice
		1、作用
			等同于字符串的切片
				等同于列表中某段连续或符合某特征的自列表
		2、列表的切片取值
			语法 ：   [startIndex:stopIndex:step]
		3、列表的切片赋值
			列表[切片] = 可迭代的对象，通过切片找到位置，把右侧的数据放进去，整合成一个list
			注意：
				列表切片赋值运算符的右侧必须是可迭代对象
			语法：
				L = [1, 2, 3, 4]
				L[0:1] = [1.1, 2.2]  -> [1.1, 2.2, 2, 3, 4]
				L[2:] = [3.3, 4.4, 5.5] -> [1.1, 2.2, 3.3, 4.4, 5.5]
				L[:] = [3, 4]  -> [3, 4]
				L[0:0] = [1,2] -> [1, 2, 3, 4]  属于在开头位置插入
				L[1:1] = [5,6,7] -> [1,5,6,7,2,3,4]  属于在索引位1的位置插入
				L[1:2] = [] -> [1,6,7,2,3,4]   删除操作
				L[1:2] = range(2,5) -> [1,2,3,4,7,2,3,4]
				
				L = ["d", "e"]
				L[:0] = ["a", "b", "c"] -> ["a","b","c","d","e"]
				
				L = [2,3,4,5,6]
				L[::2] = "abc" -> ["a",3,"b", 4,"c",6]  
				# !!! 对于步长不等于1的切片赋值操作，赋值运算符右侧的可迭代对象提供的数据元素个数，一定要等于切片切出的个数，然后依次替换
		
	6、del 语句
		作用： 删除列表中的元素
		语法：
			del 列表[索引]
			del 列表[切片]
		示例：
			L = [0,1,2,3,4,5,6]
			del L[0] -> [1,2,3,4,5,6]
			del L[::2] -> [1,3,5]
			
	7、python3中常用的序列相关的函数
		len(x) : 返回序列的长度
		max(x) : 返回序列的最大元素
		min(x) : 返回序列的最小元素
		sum(x) : 返回序列中所有元素的和(元素必须是数值类型)
		any(x) : 真值测试，如果列表中其中一个值为真则返回True
		all(x) : 真值测试，如果列表中所有值为真，则返回True
		
		练习：
			编写程序，让用户输入一些整数，输入 -1 时 表示结束，讲证书们存放在列表L中。
			1、打印共输入了几个数字
			2、打印输出最大数字
			3、打印输出最小数字
			4、打印输出平均数字
			L = []
			while True:
			    num = int(input("请输入一些整数（-1退出输入）："))
			    if num != -1:
			        L.append(num)
			    else:
			        break
			
			print(L)
			print("用户共输入了%d个数字" % len(L))
			print("数字中的最大值%d" % max(L))
			print("数字中的最小值%d" % min(L))
			print("数字的平均值是%f" % (sum(L)/len(L)))
