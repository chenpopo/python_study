1、逻辑运算符 - 布尔运算
	1、运算符
		not, and, or
	2、not
		语法： not x
		操作：
			对 x 进行布尔的取反/取非
			非真即假，非假即真
			如 bool(x) 为 True, not x 则为 False
			如 bool(x) 为False, not x 则为True
		示例：
			not True : False
			not False : True
			
			month = 10
			if not 1<=month<=12:
				print("month不在1-12之间")
	3、and 运算符
		语法：
			x and y
			注： x 和 y 是两个表达式， 可以是 bool, 也可以是非bool
					如果是非bool的话，会通过 bool()进行转换
		作用：
			将 x 和y 做并列运算
			如果 x 和 y 的结果都为 True, 那么整个结果则为 True
			如果x 和 y 有任意一个结果为False , 则整个结果为 False
		
		示例：
			1、True and True : True
			2、True and False : False
			3、False and False : False
			4、False and False : False
		特殊：
			1、0 and 0 ：0
			2、0 and 15 : 0
			3、15 and 18 ： 18
			and 两端的操作数， 如果左侧已知为False的话，则不会判断右侧，并以左侧操作数的值作为整体表达式的值
			and 两端的操作数，如果左侧判断为True的话，则继续判断右侧，并以右侧操作数的值作为整体表达式的值
	4、or 运算符
		语法：
			x or y 
		作用：
			x, y 两个条件只要有一个为True, 那么整体结果九尾True
		示例：
			1、True or True : True
			2、True or False ；True
			3、False or True : True
			4、False or False : False
		特殊：	
			当 x 为 True 时， 则以 x 的值作为 整体表达式的结果
			否则，则以 y 的值作为整体表达式的结果
			1、0 or 0.0 :  0.0
			2、100 or 200 : 100
			3、"我好帅" or "我不帅" : "我好帅"
			4、score = input("请输入考试成绩") or '0'， 没输入任何数字，直接敲击回车，则 0 作为 结果
			5、闰年计算：
				1、从终端输入一个四位整数作为年份，默认 为2000年
				2、判断这个年份是否为闰年
					该年份如果能被4整除但不能被100整除， 或者改年份能被400整除，那么该年份就是闰年
				3、输出
					1、xxxx年是闰年
					2、xxxx年不是闰年
					
2、字符串 - str
	1、作用
		用来记录文本
	2、字符串的表示方式
		但凡使用引号引起来的都是字符串
		'  '  单引号 - 不支持行内换行效果
		"  "  双引号 - 不支持行内换行效果
		'''  '''  三个单引号 - 支持行内换行效果
		'"""  """  三个双引号 - 支持行内换行效果
		示例：
			1、str = '这是第一个字符串'
			2、str = "这是第二个字符串"
			3、str = '''这是第三个字符串'''
			4、str = """这是第四个字符串"""
			5、str = ''  空字符串
		单双引号的区别：
			单引号内的双引号会正常显示输出，不算结束
			双引号内的单引号会正常显示输出，不算结束
		示例：
			1、print("this is my first str")
				输出： this is my first str
			2、print("this is my first "str")
				报错
			3、print("this is my first 'str")
				输出：this is my first 'str
		三引号字符串的作用：
			三引号内的换行会被解析成换成的效果
			三引号内是可以包含单引号和双引号的
3、隐式字符串字面值的拼接
	s = "hello world" " this is my first" ' str'  #正确
	
	str1 = "hello"
	str2 = 'world'
	str3 = str1 str2  #该方式非字面值，会报错
4、字符串中的转义字符串
	1、什么老师转义字符串
		在字符串值中，通过特殊的手段来表示一些特殊的输出值
		如： ’，"，... ...
		每一个转义字符串表示的是一个特殊的输出字符
	2、语法：
		字符串值中，通过反斜线（\）后跟一些特殊字符来表示转义字符串
		转义字符串列表：
			\' -> 单引号(')
			\" -> 双引号(")
			\\ -> 反斜线(\)
			\n -> 换行
			\t -> 水印制表符
			\v -> 垂直制表符
			\r -> 返回光标至行首
			\f -> 换页
			\b -> 倒退
			\0 -> 空字符
			\xXX -> XX 表示两位十六进制数字表示的字符，只认识两位数字，最大FF，多余两位，后面多余的就认为是普通字符串
				\x41   ->    ASCII码：  65 表示 A
			\uXXXX : XXXX 为四位16进制数字表示的字符
				\u0041  等同于  \x41
				\u4e00  ：汉子“一”
				中文的范围：  \u4e00  ~ \u9fa5				
			\UXXXXXXXX : 8位16进制数字来表示一个字符,不足8位，以0补齐
				\U00000041 = \u0041 = \x41
				
5、求序列的长度 - len()
	1、什么是序列
		由一系列数据所组成的变量，就是序列
		字符串属于序列之一
	2、len()
		作用：
			1、求序列的长度，即求序列中有多少个元素
			2、语法
				len(x)
				参数x : 要求的序列对象
				返回值 ：序列的长度
				示例：
					str = "Hello World"
					ret = len(str) # ret中保存的就是str中字符的个数
			3、试求出一下字符串包含多少个字符
				1、'1234abcd'
				2、'5\'4'
				3、'\"A\x34\u4e00\U00006041'
				4、'\\nn\\x34'

6、 raw字符 - 原始字符串
	1、语法
		r'字符串内容'
		r"字符串内容"
		r'''字符串内容'''
		r"""字符串内容"""
	2、作用
		让字符串中的转移符号 \ 失效
	3、示例
		1、str = "C:\new\test.py"
			print(str)
			输出效果：
				C:
				ew	est.py
		2. str = r"C:\new\test.py"
			print(str)
			输出效果：
				C:\new\test.py
7、字符串的运算
	1、算术运算
		1、 +
			表示的是两个字符串的拼接
			示例：
				str = "Hello" + "World"
		2、 *
			用于生成重复的字符串
			示例：
				1、 str = 2*"abc" #  str = "abcabc"
			注意：
				字符串只能和整数相乘
	2、比较运算
		>,<,>=,<=,==,!=
8、成员运算符 - in / not in
	1、作用
		判断序列中是（否）包含指定的变量/值
	2、语法
		1、in
			变量/值 in 序列
			如果变量/值在序列中出现的话，返回True，否则返回False
		2、 not in
			变量/值  not in 序列
			如果变量/值 不在 序列中出现的话，返回True, 否则返回False

9、字符串的索引操作
	1、索引的作用
		在字符串中获取指定位置的字符
	2、语法
		字符串[index]
		说明： index是索引值，是一个整数，可以是整数，复数，0
			python 中所有的序列都可以通过索引值获取内部元素
			python 索引正向索引都是从0开始，最后一个元素的索引为len(字符串)-1
			python 索引的反向索引都是从-1 开始，表示最后（最右侧）一个元素, -2表示倒数第二个元素，第一个元素则是 -len(字符串)
10、序列切片 - slice
	1、序列的切片
		从一个序列中取出相应的一些元素组成一个新的序列
	2、语法
		字符串序列[(开始索引b):(结束索引3)(:(步长s))]
		注意：()括起的部分是可以省略不写的
	3、说明
		1、开始索引 表示切片开始切得位置，使用索引来表示
			0：表示从第一个元素开始切
			1：表示从第二个元素开始切
			-1：表示从最后一个元素开始切
		2、结束索引 表示切片终止的索引，但不包含该位置的字符
		3、步长决定了切片的方向和偏移量
			1、步长的正负值决定了切片的方向
				正值 从左向右切
				负值，从右向左切
			2、步长的数字决定了切片的偏移量
				包含自己，跳过几个元素，再切
			3、步长的默认值：1
			s = "ABCDE"
			s[0:5:2] -> 'ACE'
			s[1::2] -> 'BD'
			s[::2] -> "ACE"
			s[::-1] -> "EDCBA"		
	4、示例
		s = "abcdef"
		s[3:5] 从下标3开始，到下标5结束（不包括5）
		s[0:3] 从开头开始，到下标3结束(不包括3)
		s[:4] 省略开始索引，即从头开始，到下标4结束
		s[2:] 省略结束索引，即从下标2开始，到结尾
		s[:]  省略开始索引，省略结束索引，即取字符串全部
		s[1:1] 取得""空字符串
		s[4:2] 从下标4的索引开始，到下标2结束，取得""空字符串
		s[3:8] 8已经超过了最大索引，此处取得从下标3开始，到最后
11、常用语序列的函数
	1、len() - 返回序列的长度
	2、max() - 返回序列中最大的元素
	3、min() - 返回序列中最小的元素
12、字符串编码转换函数
	1、ord(c) ：返回 c对应的Unicode码
	2、chr(i) : i是一个数字， 返回i对应的字符
13、整数转字符串函数
	1、bin(i): 将整数i转换为二进制字符串
	2、otc(i): 将整数转换为八进制字符串
	3、hex(i): 将整数转换为十六进制字符串
14、字符串转换函数 - str()
	任意类型的数据要转换为字符串都可以使用 str()


		
	


	