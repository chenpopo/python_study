序列有5中：
	str, list, tuple, bytes, bytearray 顺序存储

day15笔记
文件 File
	文件是用于数据存储的党委
			文件通常用来长期存储数据
			文件中的数据是以字节为党委进行顺序存储的
			
	文件的操作流程
		1、打开文件
		2、读写文件
		3、关闭文件
		注：任何操作系统，一个应用程序同时打开文件的数量有最大数限制
	
	文件的打开函数：
		open(file, mode='rt') 用于打开一个文件，返回此文件流对象
													如果文件打开失败，则会出发OSError类型的错误
	文件的关闭方法：
		F.close()							关闭文件，释放系统资源
	文件的读写方法参见文件
		python_base_docs_html/文件.html
	示例见：
		file_open.py
	
	文件的读方法：
		F.read([n])
		F.readline()
		F.readlines()
		详见文档
	文件的写方法：
		F.write(s) #写如字符串或字节串(二进制模式)到文件中
		F.writelines(lst) #写入字符串或字节串列表到文件中
	读文件模式：
		‘r’ 只读
	写文件模式：
		‘w’ 只写， 可创建文件
		'x' 只写， 当文件已存在时不创建文件，文件不存在才创建文件
		'a' 追加写
		详见文档


练习：
	1、自己写一个函数 read_from_file, 此函数从文件 si.txt 中读取学生信息的内容，形成字典列表，并返回
		si.txt内容格式如下：
			xiaozhang,20,100
			xiaoli,18,98
			xiaowang,19,70
		最终返回字典的列表：
			[
				{"name":"xiaozhang", "age"：20， “score”:100},
				{"name":"xiaoli", "age"：18， “score”:98},
				{"name":"xiaowang", "age"：19， “score”:70}	
			]
			

文件的迭代读取
	文本文件留对是一个可迭代对象，可以用for语句来遍历没一行数据
	迭代过程将以 ‘\n’ 作用为分隔符一次获取
	示例：
		fr = open("myfile.txt)
		for line in fr:
			print(line)



标出输入输出文件
	sys.stdin 	#标准输入文件
	sys.stdout	#标准输出文件， 默认屏幕
	sys.stderr	#标准
	模块名: sys
	注： 标准 输入输出文件不需要打开/关闭就可以使用
	示例见：
		stdout.py


二进制文件操作
	二进制文件模式字符： ‘b’
	默认文件中存储和都是以字节（byte）为单位的数据，通常有人为的格式
	对二进制文件的读写需要用字节串 （bytes）进行操作
	与文本文件操作不同，二进制文件读写过程中不会进行自动的编解码转换

	文件读取 mode 默认是 rt ,t->text文本模式， 底层读取的是二进制信息，使用decode 解码生成文本显示
	如果读取文件是使用 mode='rb'， 则读取的都是 二进制信息


二进制文件的随机访问
	F.tell()  返回当前文件的读写位置(从文件头以字节为单位)
	F.seek() 设置读写位置的偏移量
		格式：
			F.seek(偏移量, whence = 相对位置)
				偏移量：
					大于 0 的数代表想文件末尾方向移动
					小于0 代表向文件头移动
				相对位置：
					0 代表从文件头开始偏移
					1 代表从当前读写位置开始偏移
					2 代表从文件为开始偏移
					
		示例：
			tell.py
			seek.py
		注： tell 和 seek 操作通常支队二进制文件进行操作
		

汉字编码：
	国标系列
		GB18030(二字节或四字节编码， 2005年又扩展了编码集体， 为27533个汉字)
			GBK(二字节编码，1995年制定了第二代汉字编码机，21003个汉字，也包括蒙文，回文，藏文等字符)
				GB2312（二字节编码, 80年代出计算机刚进入国内，为了能显示汉字，制定了第一代汉字编码机，有6763个汉字 + 682个字符）
		(windows常用）
		
	国际标准
		UNICODE32（四字节编码）  <----->  UTF-8
		UNICODE16(二进制编码)
		（Linux/IOS/Android 常用）
	
	UTF-8 （8bit- UNICODE Transformation Frmate）

	linux下输入的中文，默认是unicode编码，在底层存储的时候又转成了utf-8，占用三个字节
	而windows下的中文很多时候是gb2312或gbk, 占用两个字节
	导致的问题是linux/windows下的中文内容文件拷贝到对方系统中，导致文件读取出现乱码

Python编码字符串
	gb2312
	gbk
	gb18032
	utf-8
	ascii
	
	示例：
		s = "ABC中文"
		
	
编码注释：
	在原文件的第一行或第二行写入如下内容为编码注释
	# -*-coding:gbk-*-
	或
	# -*-coding:utf-8-*-
	告诉python 解释执行起，此文件的内容为gbk编码方式，就不会出现编码错误了
	 
	
	
练习：
	1、将学生信息管理系统 添加保存信息到文件的功能
	2、预习面向对象